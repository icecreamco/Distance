###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         31/Aug/2016  21:43:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\Source\SampleApp. #
#                          c                                                  #
#    Command line       =  -f C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvic #
#                          e\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\icecreamco\Desktop #
#                          \´ø¹¦·Å-¾àÀë\EndDvice\Projects\zstack\Samples\Samp #
#                          leApp\Source\SampleApp.c -D xNWK_AUTO_POLL -D      #
#                          ZTOOL_P1 -D AUTO_RESET -D end01 -D xMT_TASK -D     #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB\List\ -lA C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾ #
#                          àÀë\EndDvice\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\EndDeviceEB\List\ --diag_suppress            #
#                          Pe001,Pa010 -o C:\Users\icecreamco\Desktop\´ø¹¦·Å- #
#                          ¾àÀë\EndDvice\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvic #
#                          e\Projects\zstack\Samples\SampleApp\CC2530DB\ -I   #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\Sourc #
#                          e\ -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndD #
#                          vice\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\ZMain\TI2530DB\ -I                          #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\include\ -I                  #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\include\ -I                  #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\ -I          #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\single_chip\ #
#                           -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvi #
#                          ce\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mt\ -I                       #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\services\saddr\ -I               #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\services\sdata\ -I               #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\af\ -I                     #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\ -I                    #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sapi\ -I                   #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                    #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sys\ -I                    #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\ -I                         #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\f8w\ -Ohz                   #
#                          --require_prototypes                               #
#    List file          =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB\List\SampleApp.lst                             #
#    Object file        =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\EndDevic #
#                          eEB\Obj\SampleApp.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\EndDvice\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include "MT_UART.h"
     76          #include "hal_uart.h"
     77          #include "DHT11.h"
     78          #include "lux.h"
     79          #include "string.h"
     80          #include "math.h"
     81          #include "Mac_low_level.h"
     82          #include "mac_radio.h"
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          
     91          /*********************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */
     98          
     99          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    100          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    101          {
    102            SAMPLEAPP_PERIODIC_CLUSTERID,
    103            SAMPLEAPP_FLASH_CLUSTERID
    104          };
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    107          {
    108            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    109            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    110            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    111            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    112            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    117          };
    118          
    119          // This is the Endpoint/Interface description.  It is defined here, but
    120          // filled-in in SampleApp_Init().  Another way to go would be to fill
    121          // in the structure here and make it a "const" (in code space).  The
    122          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * EXTERNAL VARIABLES
    127           */
    128          
    129          /*********************************************************************
    130           * EXTERNAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137                                    // This variable will be received when
    138                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_P2P_DstAddr;
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint8 ADDR=1;                         //¹ã²¥·¢ËÍµØÖ·
   \                     ADDR:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ADDR>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 LanFlagT=0,LanFlagR=0;          //ÐÄÌø°ü±È¶ÔÊý¾Ý
   \                     LanFlagT:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     LanFlagR:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          #define HEARTPKT 0x00
    154          #define MESGPKT 0x01

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 RXDATA=0;
   \                     RXDATA:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 RX_F = 0;
   \                     RX_F:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          /*********************************************************************
    158           * LOCAL FUNCTIONS
    159           */
    160          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    161          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    162          void SampleApp_SendPeriodicMessage(uint8 ADR);
    163          void SampleApp_SendFlashMessage( uint16 flashTime );
    164          void SampleApp_Send_P2P_Message(void);
    165          char abs(char x);
    166          
    167          /*********************************************************************
    168           * NETWORK LAYER CALLBACKS
    169           */
    170          
    171          /*********************************************************************
    172           * PUBLIC FUNCTIONS
    173           */
    174          
    175          /*********************************************************************
    176           * @fn      SampleApp_Init
    177           *
    178           * @brief   Initialization function for the Generic App Task.
    179           *          This is called during initialization and should contain
    180           *          any application specific initialization (ie. hardware
    181           *          initialization/setup, table initialization, power up
    182           *          notificaiton ... ).
    183           *
    184           * @param   task_id - the ID assigned by OSAL.  This ID should be
    185           *                    used to send messages and set timers.
    186           *
    187           * @return  none
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    190          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    191            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    192            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    193            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    194          
    195            MT_UartInit ();
   \   00001B                ; Setup parameters for call to function MT_UartInit
   \   00001B   12....       LCALL   ??MT_UartInit?relay
    196            MT_UartRegisterTaskID( task_id);
   \   00001E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartRegisterTaskID?relay
    197            uint8 power = TXPOWER;
   \   000023   12....       LCALL   ?Subroutine2 & 0xFFFF
    198            HalUARTWrite(0, &power, 1);
   \                     ??CrossCallReturnLabel_6:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C01         MOV     R4,#0x1
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
    199            
    200            // Device hardware initialization can be added here or in main() (Zmain.c).
    201            // If the hardware is application specific - add it here.
    202            // If the hardware is other parts of the device add it in main().
    203          
    204           #if defined ( BUILD_ALL_DEVICES )
    205            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    206            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    207            // together - if they are - we will start up a coordinator. Otherwise,
    208            // the device will start as a router.
    209            if ( readCoordinatorJumper() )
    210              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    211            else
    212              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    213          #endif // BUILD_ALL_DEVICES
    214          
    215          #if defined ( HOLD_AUTO_START )
    216            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    217            //  from starting the device and wait for the application to
    218            //  start the device.
    219            ZDOInitDevice(0);
    220          #endif
    221          
    222            // Setup for the periodic message's destination address
    223            // Broadcast to everyone
    224            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000033   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000036   740F         MOV     A,#0xf
   \   000038   F0           MOVX    @DPTR,A
    225            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    226            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00003D   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000040   74FF         MOV     A,#-0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
    227          
    228            // Setup for the flash command's destination address - Group 1
    229            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000045   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000048   7401         MOV     A,#0x1
   \   00004A   F0           MOVX    @DPTR,A
    230            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004B   A3           INC     DPTR
   \   00004C   7414         MOV     A,#0x14
   \   00004E   F0           MOVX    @DPTR,A
    231            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004F   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000052   7401         MOV     A,#0x1
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    232          
    233            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000058   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00005B   7402         MOV     A,#0x2
   \   00005D   F0           MOVX    @DPTR,A
    234            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005E   A3           INC     DPTR
   \   00005F   7414         MOV     A,#0x14
   \   000061   F0           MOVX    @DPTR,A
    235            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;
   \   000062   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    236            
    237            // Fill out the endpoint description.
    238            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000069   90....       MOV     DPTR,#SampleApp_epDesc
   \   00006C   7414         MOV     A,#0x14
   \   00006E   F0           MOVX    @DPTR,A
    239            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    240            SampleApp_epDesc.simpleDesc
    241                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000077   A3           INC     DPTR
   \   000078   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007E   F0           MOVX    @DPTR,A
    242            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00007F   A3           INC     DPTR
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
    243          
    244            // Register the endpoint description with the AF
    245            afRegister( &SampleApp_epDesc );
   \   000082                ; Setup parameters for call to function afRegister
   \   000082   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000084   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000086   12....       LCALL   ??afRegister?relay
    246          
    247            // Register for all key events - This app will handle all key events
    248            RegisterForKeys( SampleApp_TaskID );
   \   000089                ; Setup parameters for call to function RegisterForKeys
   \   000089   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??RegisterForKeys?relay
    249          
    250            // By default, all devices start out in Group 1
    251            SampleApp_Group.ID = 0x0001;
   \   000091   90....       MOV     DPTR,#SampleApp_Group
   \   000094   7401         MOV     A,#0x1
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
    252            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00009A                ; Setup parameters for call to function osal_memcpy
   \   00009A   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009D   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A0   F5..         MOV     ?V0 + 2,A
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A7   7C07         MOV     R4,#0x7
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AD   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AF   12....       LCALL   ??osal_memcpy?relay
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
    253            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000B7                ; Setup parameters for call to function aps_AddGroup
   \   0000B7   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B9   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000BB   7914         MOV     R1,#0x14
   \   0000BD   12....       LCALL   ??aps_AddGroup?relay
    254          
    255          #if defined ( LCD_SUPPORTED )
    256            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    257          #endif
    258          }
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2                REQUIRE ?Subroutine0
   \   0000C2                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   906190       MOV     DPTR,#0x6190
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    259          
    260          /*********************************************************************
    261           * @fn      SampleApp_ProcessEvent
    262           *
    263           * @brief   Generic Application Task event processor.  This function
    264           *          is called to process all events for the task.  Events
    265           *          include timers, messages and any other user defined events.
    266           *
    267           * @param   task_id  - The OSAL assigned task ID.
    268           * @param   events - events to process.  This is a bit map and can
    269           *                   contain more than one event.
    270           *
    271           * @return  none
    272           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    274          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    275            afIncomingMSGPacket_t *MSGpkt;
    276            (void)task_id;  // Intentionally unreferenced parameter
    277          
    278            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   607A         JZ      ??SampleApp_ProcessEvent_0
    279            {
    280              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802C         SJMP    ??SampleApp_ProcessEvent_1
    281              while ( MSGpkt )
    282              {
    283                switch ( MSGpkt->hdr.event )
    284                {
    285                  // Received when a key is pressed
    286                  case KEY_CHANGE:
    287                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    288                    break;
    289          
    290                  // Received when a messages is received (OTA) for this endpoint
    291                  case AF_INCOMING_MSG_CMD:
    292                    SampleApp_MessageMSGCB( MSGpkt );
    293          
    294                   break;
    295          
    296                  // Received whenever the device changes state in the network
    297                  case ZDO_STATE_CHANGE:
    298                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    299                    if (   (SampleApp_NwkState == DEV_ROUTER)
    300                        || (SampleApp_NwkState == DEV_END_DEVICE) 
    301                          )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7016         JNZ     ??SampleApp_ProcessEvent_4
    302                    {
    303                      // Start sending the periodic message in a regular interval.
    304                      osal_start_timerEx( SampleApp_TaskID,
    305                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    306                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CB8         MOV     R4,#-0x48
   \   000020   7D0B         MOV     R5,#0xb
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    307                      SampleApp_Send_P2P_Message();
   \   00002E                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00002E   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    308                      macRadioEnergyDetectStart();
   \   000031                ; Setup parameters for call to function macRadioEnergyDetectStart
   \   000031   12....       LCALL   ??macRadioEnergyDetectStart?relay
    309                    }
    310                    else
    311                    {
    312                      // Device is no longer in the network
    313                    }
    314                    break;
    315          
    316                  default:
    317                    break;
    318                }
    319          
    320                // Release the memory
    321                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000034                ; Setup parameters for call to function osal_msg_deallocate
   \   000034   AA..         MOV     R2,?V0 + 0
   \   000036   AB..         MOV     R3,?V0 + 1
   \   000038   12....       LCALL   ??osal_msg_deallocate?relay
    322          
    323                // Next - if one is available
    324                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003B                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??osal_msg_receive?relay
   \   000043   8A..         MOV     ?V0 + 0,R2
   \   000045   8B..         MOV     ?V0 + 1,R3
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   45..         ORL     A,?V0 + 1
   \   00004B   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004D   85..82       MOV     DPL,?V0 + 0
   \   000050   85..83       MOV     DPH,?V0 + 1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   24E6         ADD     A,#-0x1a
   \   000056   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000058   245A         ADD     A,#0x5a
   \   00005A   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005C   24EF         ADD     A,#-0x11
   \   00005E   60AF         JZ      ??SampleApp_ProcessEvent_2
   \   000060   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000062                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   85..82       MOV     DPL,?V0 + 0
   \   00006A   85..83       MOV     DPH,?V0 + 1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000074   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000076                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   AB..         MOV     R3,?V0 + 1
   \   00007A   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007D   80B5         SJMP    ??SampleApp_ProcessEvent_4
    325              }
    326          
    327              // return unprocessed events
    328              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000084   FB           MOV     R3,A
   \   000085   8027         SJMP    ??SampleApp_ProcessEvent_9
    329            }
    330          
    331            // Send a message out - This event is generated by a timer
    332            //  (setup in SampleApp_Init()).
    333            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000087   EE           MOV     A,R6
   \   000088   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008A   501E         JNC     ??SampleApp_ProcessEvent_10
    334            {
    335              // Send the periodic message
    336               
    337              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    338                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008C                ; Setup parameters for call to function osal_rand
   \   00008C   12....       LCALL   ??osal_rand?relay
   \   00008F                ; Setup parameters for call to function osal_start_timerEx
   \   00008F   EA           MOV     A,R2
   \   000090   24B8         ADD     A,#-0x48
   \   000092   FC           MOV     R4,A
   \   000093   E4           CLR     A
   \   000094   340B         ADDC    A,#0xb
   \   000096   FD           MOV     R5,A
   \   000097   7A01         MOV     R2,#0x1
   \   000099   7B00         MOV     R3,#0x0
   \   00009B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   12....       LCALL   ??osal_start_timerEx?relay
    339          
    340              // return unprocessed events
    341              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A3   EE           MOV     A,R6
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   FA           MOV     R2,A
   \   0000A7   EF           MOV     A,R7
   \   0000A8   80DA         SJMP    ??SampleApp_ProcessEvent_8
    342            }
    343          
    344            // Discard unknown events
    345            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AE   7F04         MOV     R7,#0x4
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          }
    347          
    348          /*********************************************************************
    349           * Event Generation Functions
    350           */
    351          /*********************************************************************
    352           * @fn      SampleApp_HandleKeys
    353           *
    354           * @brief   Handles all key events for this device.
    355           *
    356           * @param   shift - true if in shift/alt.
    357           * @param   keys - bit field for key events. Valid entries:
    358           *                 HAL_KEY_SW_2
    359           *                 HAL_KEY_SW_1
    360           *
    361           * @return  none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    364          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    365            (void)shift;  // Intentionally unreferenced parameter
    366            
    367            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    368            {
    369              /* This key sends the Flash Command is sent to Group 1.
    370               * This device will not receive the Flash Command from this
    371               * device (even if it belongs to group 1).
    372               */
    373              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    374            }
    375          
    376            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    377            {
    378              /* The Flashr Command is sent to Group 1.
    379               * This key toggles this device in and out of group 1.
    380               * If this device doesn't belong to group 1, this application
    381               * will not receive the Flash command sent to group 1.
    382               */
    383              aps_Group_t *grp;
    384              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    385              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    386              {
    387                // Remove from the group
    388                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    389              }
    390              else
    391              {
    392                // Add to the flash group
    393                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    394              }
    395            }
    396          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine6_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    397          
    398          /*********************************************************************
    399           * LOCAL FUNCTIONS
    400           */
    401          
    402          /*********************************************************************
    403           * @fn      SampleApp_MessageMSGCB
    404           *
    405           * @brief   Data message processor callback.  This function processes
    406           *          any incoming data - probably from other devices.  So, based
    407           *          on cluster ID, perform the intended action.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    414          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    415            uint16 flashTime;
    416            uint8 rssilevel;
    417            char data[4]={0}; 
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7402         MOV     A,#0x2
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    418            switch ( pkt->clusterId )
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 1,A
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000036   0200         DW        2
   \   000038   02           DB        2
   \   000039   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003B   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003F   ....         DW        ??SampleApp_MessageMSGCB_2
    419            {
    420              case SAMPLEAPP_PERIODIC_CLUSTERID:
    421          
    422                break;
    423                
    424              case SAMPLEAPP_P2P_CLUSTERID:
    425                osal_memcpy(data,pkt->cmd.Data,pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   75..00       MOV     ?V0 + 2,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   EA           MOV     A,R2
   \   000053   2420         ADD     A,#0x20
   \   000055   F582         MOV     DPL,A
   \   000057   EB           MOV     A,R3
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FC           MOV     R4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FD           MOV     R5,A
   \   000061   7405         MOV     A,#0x5
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memcpy?relay
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    426                
    427                if ( data[0]=='A' && data[1]=='B' && data[2]=='C' && data[3]=='D' )
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6441         XRL     A,#0x41
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6442         XRL     A,#0x42
   \   000087   6003         JZ      $+5
   \   000089   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   00008C   7404         MOV     A,#0x4
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6443         XRL     A,#0x43
   \   000094   6003         JZ      $+5
   \   000096   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   000099   7405         MOV     A,#0x5
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6444         XRL     A,#0x44
   \   0000A1   6003         JZ      $+5
   \   0000A3   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    428                {
    429                  rssilevel=macRadioEnergyDetectStop();   //Í£Ö¹¼ì²â  
   \   0000A6                ; Setup parameters for call to function macRadioEnergyDetectStop
   \   0000A6   12....       LCALL   ??macRadioEnergyDetectStop?relay
   \   0000A9   E9           MOV     A,R1
   \   0000AA   FE           MOV     R6,A
    430                  uint8 message[2];
    431                  message[0] = TXPOWER;
   \   0000AB   12....       LCALL   ?Subroutine2 & 0xFFFF
    432                  message[1] = rssilevel;
   \                     ??CrossCallReturnLabel_7:
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E9           MOV     A,R1
   \   0000B4   F0           MOVX    @DPTR,A
    433                  HalUARTWrite(0, message, 2);
   \   0000B5                ; Setup parameters for call to function HalUARTWrite
   \   0000B5   7C02         MOV     R4,#0x2
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   85..82       MOV     DPL,?XSP + 0
   \   0000BC   85..83       MOV     DPH,?XSP + 1
   \   0000BF   AA82         MOV     R2,DPL
   \   0000C1   AB83         MOV     R3,DPH
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   12....       LCALL   ??HalUARTWrite?relay
    434                    rssilevel=rssilevel/32+1;
    435                    P0DIR|=0XFF;
   \   0000C8   E5FD         MOV     A,0xfd
   \   0000CA   75FDFF       MOV     0xfd,#-0x1
    436                    P1DIR|=0XFF;
   \   0000CD   E5FE         MOV     A,0xfe
   \   0000CF   75FEFF       MOV     0xfe,#-0x1
    437                    switch(rssilevel)
   \   0000D2   EE           MOV     A,R6
   \   0000D3   C4           SWAP    A
   \   0000D4   13           RRC     A
   \   0000D5   5407         ANL     A,#0x7
   \   0000D7   04           INC     A
   \   0000D8   14           DEC     A
   \   0000D9   6017         JZ      ??SampleApp_MessageMSGCB_3
   \   0000DB   14           DEC     A
   \   0000DC   601C         JZ      ??SampleApp_MessageMSGCB_4
   \   0000DE   14           DEC     A
   \   0000DF   6021         JZ      ??SampleApp_MessageMSGCB_5
   \   0000E1   14           DEC     A
   \   0000E2   6026         JZ      ??SampleApp_MessageMSGCB_6
   \   0000E4   14           DEC     A
   \   0000E5   602B         JZ      ??SampleApp_MessageMSGCB_7
   \   0000E7   14           DEC     A
   \   0000E8   6030         JZ      ??SampleApp_MessageMSGCB_8
   \   0000EA   14           DEC     A
   \   0000EB   6035         JZ      ??SampleApp_MessageMSGCB_9
   \   0000ED   14           DEC     A
   \   0000EE   603A         JZ      ??SampleApp_MessageMSGCB_10
   \   0000F0   8040         SJMP    ??SampleApp_MessageMSGCB_11
    438                    {
    439                      case 1:
    440                        P1=0X00;
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000F2   759000       MOV     0x90,#0x0
    441                        P0=0x80;
   \   0000F5   758080       MOV     0x80,#-0x80
    442                        break;
   \   0000F8   803E         SJMP    ??SampleApp_MessageMSGCB_12
    443                      case 2:
    444                        P1=0X00;
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000FA   759000       MOV     0x90,#0x0
    445                        P0=0xc0;
   \   0000FD   7580C0       MOV     0x80,#-0x40
    446                        break;
   \   000100   8036         SJMP    ??SampleApp_MessageMSGCB_12
    447                      case 3:
    448                        P1=0X00;
   \                     ??SampleApp_MessageMSGCB_5:
   \   000102   759000       MOV     0x90,#0x0
    449                        P0=0xe0;
   \   000105   7580E0       MOV     0x80,#-0x20
    450                        break;
   \   000108   802E         SJMP    ??SampleApp_MessageMSGCB_12
    451                      case 4:
    452                        P1=0X00;
   \                     ??SampleApp_MessageMSGCB_6:
   \   00010A   759000       MOV     0x90,#0x0
    453                        P0=0xf0;
   \   00010D   7580F0       MOV     0x80,#-0x10
    454                        break;
   \   000110   8026         SJMP    ??SampleApp_MessageMSGCB_12
    455                      case 5:
    456                        P1=0X08;
   \                     ??SampleApp_MessageMSGCB_7:
   \   000112   759008       MOV     0x90,#0x8
    457                        P0=0xf8;
   \   000115   7580F8       MOV     0x80,#-0x8
    458                        break;
   \   000118   801E         SJMP    ??SampleApp_MessageMSGCB_12
    459                      case 6:
    460                        P1=0X0C;
   \                     ??SampleApp_MessageMSGCB_8:
   \   00011A   75900C       MOV     0x90,#0xc
    461                        P0=0xfc;
   \   00011D   7580FC       MOV     0x80,#-0x4
    462                        break;
   \   000120   8016         SJMP    ??SampleApp_MessageMSGCB_12
    463                      case 7:
    464                        P1=0X0C;
   \                     ??SampleApp_MessageMSGCB_9:
   \   000122   75900C       MOV     0x90,#0xc
    465                        P0=0xfe;
   \   000125   7580FE       MOV     0x80,#-0x2
    466                        break;
   \   000128   800E         SJMP    ??SampleApp_MessageMSGCB_12
    467                      case 8:
    468                        P1=0X0C;
   \                     ??SampleApp_MessageMSGCB_10:
   \   00012A   75900C       MOV     0x90,#0xc
    469                        P0=0xff;
   \   00012D   7580FF       MOV     0x80,#-0x1
    470                        break;
   \   000130   8006         SJMP    ??SampleApp_MessageMSGCB_12
    471                      default:
    472                        P1=0X00;
   \                     ??SampleApp_MessageMSGCB_11:
   \   000132   759000       MOV     0x90,#0x0
    473                        P0=0X00;
   \   000135   758000       MOV     0x80,#0x0
    474                        break;
    475                    }
    476                    macRadioEnergyDetectStart();             //ÔÙ´Î¿ªÊ¼¼ì²â
   \                     ??SampleApp_MessageMSGCB_12:
   \   000138                ; Setup parameters for call to function macRadioEnergyDetectStart
   \   000138   12....       LCALL   ??macRadioEnergyDetectStart?relay
    477                    SampleApp_Send_P2P_Message();
   \   00013B                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00013B   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
   \   00013E   8033         SJMP    ??SampleApp_MessageMSGCB_0
    478                }
    479                break;  
    480                
    481              case SAMPLEAPP_FLASH_CLUSTERID:
    482                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    483                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   000140   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000143   F8           MOV     R0,A
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147                ; Setup parameters for call to function HalLedBlink
   \   000147   8882         MOV     DPL,R0
   \   000149   8983         MOV     DPH,R1
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   FA           MOV     R2,A
   \   00014E   8882         MOV     DPL,R0
   \   000150   8983         MOV     DPH,R1
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F9           MOV     R1,A
   \   000156   EA           MOV     A,R2
   \   000157   2400         ADD     A,#0x0
   \   000159   F5..         MOV     ?V0 + 0,A
   \   00015B   E4           CLR     A
   \   00015C   39           ADDC    A,R1
   \   00015D   F5..         MOV     ?V0 + 1,A
   \   00015F   7402         MOV     A,#0x2
   \   000161   78..         MOV     R0,#?V0 + 0
   \   000163   12....       LCALL   ?US_SHR
   \   000166   AC..         MOV     R4,?V0 + 0
   \   000168   AD..         MOV     R5,?V0 + 1
   \   00016A   7B32         MOV     R3,#0x32
   \   00016C   7A04         MOV     R2,#0x4
   \   00016E   7908         MOV     R1,#0x8
   \   000170   12....       LCALL   ??HalLedBlink?relay
    484                break;
    485            }
    486          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000173   7406         MOV     A,#0x6
   \   000175   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000178                REQUIRE P0DIR
   \   000178                REQUIRE P1DIR
   \   000178                REQUIRE _A_P1
   \   000178                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    487          
    488          /*********************************************************************
    489           * @fn      SampleApp_SendPeriodicMessage
    490           *
    491           * @brief   Send the periodic message.
    492           *
    493           * @param   none
    494           *
    495           * @return  none
    496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void SampleApp_SendPeriodicMessage(uint8 ADR)
   \                     SampleApp_SendPeriodicMessage:
    498          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    499            uint8 data[]="D1";
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant "D1">` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant "D1">` & 0xff
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    500            data[1]=ADR+0X30;
   \   000021   7430         MOV     A,#0x30
   \   000023   2E           ADD     A,R6
   \   000024   C0E0         PUSH    A
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine4 & 0xFFFF
    501            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    502                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    503                                 2,
    504                                 data,
    505                                 &SampleApp_TransID,
    506                                 AF_DISCV_ROUTE,
    507                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000036   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   8582..       MOV     ?V0 + 0,DPL
   \   000046   8583..       MOV     ?V0 + 1,DPH
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..02       MOV     ?V0 + 0,#0x2
   \   000051   75..00       MOV     ?V0 + 1,#0x0
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..01       MOV     ?V0 + 0,#0x1
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7920         MOV     R1,#0x20
   \   000063   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000065   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000067   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000069   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00006B   02....       LJMP    ?Subroutine1 & 0xFFFF
    508            {
    509            }
    510            else
    511            {
    512              // Error occurred in request to send.
    513            }
    514          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7403         MOV     A,#0x3
   \   00000A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000D                REQUIRE ??Subroutine6_0
   \   00000D                ; // Fall through to label ??Subroutine6_0
    515          
    516          /*********************************************************************
    517           * @fn      SampleApp_SendFlashMessage
    518           *
    519           * @brief   Send the flash message to group 1.
    520           *
    521           * @param   flashTime - in milliseconds
    522           *
    523           * @return  none
    524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    525          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    526          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    527            uint8 buffer[3];
    528            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    529            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    530            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   12....       LCALL   ?Subroutine4 & 0xFFFF
    531          
    532            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    533                                 SAMPLEAPP_FLASH_CLUSTERID,
    534                                 3,
    535                                 buffer,
    536                                 &SampleApp_TransID,
    537                                 AF_DISCV_ROUTE,
    538                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   8582..       MOV     ?V0 + 0,DPL
   \   00003C   8583..       MOV     ?V0 + 1,DPH
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..03       MOV     ?V0 + 0,#0x3
   \   000047   75..00       MOV     ?V0 + 1,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..02       MOV     ?V0 + 0,#0x2
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   7920         MOV     R1,#0x20
   \   000059   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005B   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005D   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00005F   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000061   80..         SJMP    ?Subroutine1
    539            {
    540            }
    541            else
    542            {
    543              // Error occurred in request to send.
    544            }
    545          }
    546          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    547          void SampleApp_Send_P2P_Message() 
   \                     SampleApp_Send_P2P_Message:
    548          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    549            
    550            uint8  strTemp[3];
    551            strTemp[0] = 111;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   746F         MOV     A,#0x6f
   \   000012   F0           MOVX    @DPTR,A
    552            strTemp[1] = NLME_GetShortAddr() / 256;
   \   000013                ; Setup parameters for call to function NLME_GetShortAddr
   \   000013   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    553            strTemp[2] = NLME_GetShortAddr() % 256;
   \   00001D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   EA           MOV     A,R2
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
    554            
    555              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc, 
    556                                    SAMPLEAPP_P2P_CLUSTERID, 
    557                                    3, 
    558                                    strTemp, 
    559                                    &SampleApp_TransID, 
    560                                    AF_DISCV_ROUTE, 
    561                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) 
   \                     ??CrossCallReturnLabel_4:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..04       MOV     ?V0 + 0,#0x4
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000064                REQUIRE ?Subroutine1
   \   000064                ; // Fall through to label ?Subroutine1
    562              { 
    563                
    564              }
    565              else 
    566              { 
    567                  // Error occurred in request to send. 
    568              } 
    569          } 
    570          /*********************************************************************
    571          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          char abs(char x)
   \                     abs:
    573          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    574            if(x>=0)
                       ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
    575              return x;
   \   000000   02....       LJMP    ?BRET
    576            else
    577              return -x;
    578          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ADDR>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??abs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    abs

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "D1">`:
   \   000000   443100       DB "D1"

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     1      0     15
       -> MT_UartInit                   0      0     24
       -> MT_UartRegisterTaskID         0      0     24
       -> HalUARTWrite                  0      0     24
       -> afRegister                    0      0     24
       -> RegisterForKeys               0      0     24
       -> osal_memcpy                   0      0     30
       -> aps_AddGroup                  0      0     24
     SampleApp_MessageMSGCB             2      0     32
       -> osal_memcpy                   0      0     40
       -> macRadioEnergyDetectStop      0      0     34
       -> HalUARTWrite                  0      0     34
       -> macRadioEnergyDetectStart     0      0     34
       -> SampleApp_Send_P2P_Message
                                        0      0     34
       -> HalLedBlink                   0      0     34
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> macRadioEnergyDetectStart     0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_Send_P2P_Message         1      0     39
       -> NLME_GetShortAddr             0      0     26
       -> NLME_GetShortAddr             0      0     26
       -> AF_DataRequest                0      0     44
     abs                                0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     P0DIR                                    1
     P1DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     ADDR                                     1
     LanFlagT                                 1
     LanFlagR                                 1
     RXDATA                                   1
     RX_F                                     1
     SampleApp_Init                         194
     ?Subroutine0                             8
     ?Subroutine2                             3
     ??Subroutine5_0                          9
     SampleApp_ProcessEvent                 179
     SampleApp_HandleKeys                    62
     ??Subroutine6_0                          5
     SampleApp_MessageMSGCB                 376
     ?Subroutine3                            12
     SampleApp_SendPeriodicMessage          110
     ?Subroutine4                             7
     ?Subroutine1                            13
     SampleApp_SendFlashMessage              99
     SampleApp_Send_P2P_Message             100
     abs                                      3
     ?<Initializer for ADDR>                  1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??abs?relay                              6
     ?<Constant "Group 1">                    8
     ?<Constant {0}>                          4
     ?<Constant "D1">                         3

 
 1 180 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    31 bytes in segment XDATA_ROM_C
    69 bytes in segment XDATA_Z
 
 1 229 bytes of CODE  memory
    31 bytes of CONST memory
     0 bytes of DATA  memory (+ 4 bytes shared)
    70 bytes of XDATA memory

Errors: none
Warnings: 1
