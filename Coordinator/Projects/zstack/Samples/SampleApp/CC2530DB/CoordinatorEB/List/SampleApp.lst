###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         31/Aug/2016  23:21:22 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\Source\SampleA #
#                          pp.c                                               #
#    Command line       =  -f C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordin #
#                          ator\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordin #
#                          ator\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\icecreamco\Desktop #
#                          \´ø¹¦·Å-¾àÀë\Coordinator\Projects\zstack\Samples\S #
#                          ampleApp\Source\SampleApp.c -D ZTOOL_P1 -D         #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\Coord #
#                          inatorEB\List\ -lA C:\Users\icecreamco\Desktop\´ø¹ #
#                          ¦·Å-¾àÀë\Coordinator\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\CoordinatorEB\List\ --diag_suppress  #
#                          Pe001,Pa010 -o C:\Users\icecreamco\Desktop\´ø¹¦·Å- #
#                          ¾àÀë\Coordinator\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\CoordinatorEB\Obj\ -e --no_code_motion   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordin #
#                          ator\Projects\zstack\Samples\SampleApp\CC2530DB\   #
#                          -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordin #
#                          ator\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \Source\ -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀ #
#                          ë\Coordinator\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\ZMain\TI2530DB\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\include\ -I               #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\target\CC2530EB\ -I       #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\include\ -I               #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\high_level\ -I            #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\low_level\srf04\ -I       #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\low_level\srf04\single_ch #
#                          ip\ -I C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coo #
#                          rdinator\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mt\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\osal\include\ -I              #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\af\ -I                  #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\nwk\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sapi\ -I                #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sec\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sys\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\zdo\ -I                 #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\zmac\ -I                      #
#                          C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\zmac\f8w\ -Ohz                #
#                          --require_prototypes                               #
#    List file          =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\Coord #
#                          inatorEB\List\SampleApp.lst                        #
#    Object file        =  C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinato #
#                          r\Projects\zstack\Samples\SampleApp\CC2530DB\Coord #
#                          inatorEB\Obj\SampleApp.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinator\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          #include "mac_radio.h"
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include "MT_UART.h"
     76          #include "hal_uart.h"
     77          #include "DHT11.h"
     78          #include "lux.h"
     79          #include "Mac_low_level.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_P2P_DstAddr;
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    149          uint8 ADDR=1;
   \                     ADDR:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ADDR>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 TX_F = 0;
   \                     TX_F:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint16 shortAddr = 0;
   \                     shortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTIONS
    155           */
    156          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    157          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    158          void SampleApp_SendPeriodicMessage(uint8 ADR,uint8 fieldsel);
    159          void SampleApp_SendFlashMessage( uint16 flashTime );
    160          void SampleApp_Send_P2P_Message(uint8* dat, uint8 n, uint16 shortaddr);
    161          
    162          /*********************************************************************
    163           * NETWORK LAYER CALLBACKS
    164           */
    165          
    166          /*********************************************************************
    167           * PUBLIC FUNCTIONS
    168           */
    169          
    170          /*********************************************************************
    171           * @fn      SampleApp_Init
    172           *
    173           * @brief   Initialization function for the Generic App Task.
    174           *          This is called during initialization and should contain
    175           *          any application specific initialization (ie. hardware
    176           *          initialization/setup, table initialization, power up
    177           *          notificaiton ... ).
    178           *
    179           * @param   task_id - the ID assigned by OSAL.  This ID should be
    180           *                    used to send messages and set timers.
    181           *
    182           * @return  none
    183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    185          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    186            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    187            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    188            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    189            
    190            MT_UartInit ();
   \   00001B                ; Setup parameters for call to function MT_UartInit
   \   00001B   12....       LCALL   ??MT_UartInit?relay
    191            MT_UartRegisterTaskID( task_id);
   \   00001E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??MT_UartRegisterTaskID?relay
    192            HalUARTWrite(0,"UART OK\n",8);
   \   000023                ; Setup parameters for call to function HalUARTWrite
   \   000023   7C08         MOV     R4,#0x8
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A..         MOV     R2,#`?<Constant "UART OK\\n">` & 0xff
   \   000029   7B..         MOV     R3,#(`?<Constant "UART OK\\n">` >> 8) & 0xff
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTWrite?relay
    193            uint8 power = TXPOWER;
   \   000030   12....       LCALL   ?Subroutine2 & 0xFFFF
    194            HalUARTWrite(0,&power,1);
   \                     ??CrossCallReturnLabel_3:
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C01         MOV     R4,#0x1
   \   000035   7D00         MOV     R5,#0x0
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   ??HalUARTWrite?relay
    195            // Device hardware initialization can be added here or in main() (Zmain.c).
    196            // If the hardware is application specific - add it here.
    197            // If the hardware is other parts of the device add it in main().
    198          
    199           #if defined ( BUILD_ALL_DEVICES )
    200            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    201            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    202            // together - if they are - we will start up a coordinator. Otherwise,
    203            // the device will start as a router.
    204            if ( readCoordinatorJumper() )
    205              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    206            else
    207              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    208          #endif // BUILD_ALL_DEVICES
    209          
    210          #if defined ( HOLD_AUTO_START )
    211            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    212            //  from starting the device and wait for the application to
    213            //  start the device.
    214            ZDOInitDevice(0);
    215          #endif
    216          
    217            // Setup for the periodic message's destination address
    218            // Broadcast to everyone
    219            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000040   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000043   740F         MOV     A,#0xf
   \   000045   F0           MOVX    @DPTR,A
    220            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    221            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00004A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
    222          
    223            // Setup for the flash command's destination address - Group 1
    224            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000052   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000055   7401         MOV     A,#0x1
   \   000057   F0           MOVX    @DPTR,A
    225            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000058   A3           INC     DPTR
   \   000059   7414         MOV     A,#0x14
   \   00005B   F0           MOVX    @DPTR,A
    226            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00005C   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
    227          
    228            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000065   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000068   7402         MOV     A,#0x2
   \   00006A   F0           MOVX    @DPTR,A
    229            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006B   A3           INC     DPTR
   \   00006C   7414         MOV     A,#0x14
   \   00006E   F0           MOVX    @DPTR,A
    230            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;
   \   00006F   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
    231            
    232            // Fill out the endpoint description.
    233            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000076   90....       MOV     DPTR,#SampleApp_epDesc
   \   000079   7414         MOV     A,#0x14
   \   00007B   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000083   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.simpleDesc
    236                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000084   A3           INC     DPTR
   \   000085   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00008B   F0           MOVX    @DPTR,A
    237            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00008C   A3           INC     DPTR
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
    238          
    239            // Register the endpoint description with the AF
    240            afRegister( &SampleApp_epDesc );
   \   00008F                ; Setup parameters for call to function afRegister
   \   00008F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000091   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000093   12....       LCALL   ??afRegister?relay
    241          
    242            // Register for all key events - This app will handle all key events
    243            RegisterForKeys( SampleApp_TaskID );
   \   000096                ; Setup parameters for call to function RegisterForKeys
   \   000096   90....       MOV     DPTR,#SampleApp_TaskID
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   ??RegisterForKeys?relay
    244          
    245            // By default, all devices start out in Group 1
    246            SampleApp_Group.ID = 0x0001;
   \   00009E   90....       MOV     DPTR,#SampleApp_Group
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
    247            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000AA   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B4   7C07         MOV     R4,#0x7
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000BA   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000BC   12....       LCALL   ??osal_memcpy?relay
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
    248            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000C4                ; Setup parameters for call to function aps_AddGroup
   \   0000C4   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000C6   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C8   7914         MOV     R1,#0x14
   \   0000CA   12....       LCALL   ??aps_AddGroup?relay
    249          
    250          #if defined ( LCD_SUPPORTED )
    251            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    252          #endif
    253          }
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF                REQUIRE ?Subroutine0
   \   0000CF                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   906190       MOV     DPTR,#0x6190
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    254          
    255          /*********************************************************************
    256           * @fn      SampleApp_ProcessEvent
    257           *
    258           * @brief   Generic Application Task event processor.  This function
    259           *          is called to process all events for the task.  Events
    260           *          include timers, messages and any other user defined events.
    261           *
    262           * @param   task_id  - The OSAL assigned task ID.
    263           * @param   events - events to process.  This is a bit map and can
    264           *                   contain more than one event.
    265           *
    266           * @return  none
    267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    269          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    270            afIncomingMSGPacket_t *MSGpkt;
    271            (void)task_id;  // Intentionally unreferenced parameter
    272          
    273            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6077         JZ      ??SampleApp_ProcessEvent_0
    274            {
    275              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8029         SJMP    ??SampleApp_ProcessEvent_1
    276              while ( MSGpkt )
    277              {
    278                switch ( MSGpkt->hdr.event )
    279                {
    280                  // Received when a key is pressed
    281                  case KEY_CHANGE:
    282                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    283                    break;
    284          
    285                  // Received when a messages is received (OTA) for this endpoint
    286                  case AF_INCOMING_MSG_CMD:
    287                    SampleApp_MessageMSGCB( MSGpkt );
    288                    break;
    289          
    290                  // Received whenever the device changes state in the network
    291                  case ZDO_STATE_CHANGE:
    292                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   90....       MOV     DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX    @DPTR,A
    293                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    294                        || (SampleApp_NwkState == DEV_ROUTER) 
    295                          )
   \   00001A   6409         XRL     A,#0x9
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6407         XRL     A,#0x7
   \   000021   7013         JNZ     ??SampleApp_ProcessEvent_4
    296                    {
    297                      // Start sending the periodic message in a regular interval.
    298                     
    299                      osal_start_timerEx( SampleApp_TaskID,
    300                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    301                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7CD0         MOV     R4,#-0x30
   \   000025   7D07         MOV     R5,#0x7
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay
    302                      macRadioEnergyDetectStart();
   \   000033                ; Setup parameters for call to function macRadioEnergyDetectStart
   \   000033   12....       LCALL   ??macRadioEnergyDetectStart?relay
    303                    }
    304                    else
    305                    {
    306                      // Device is no longer in the network
    307                    }
    308                    break;
    309          
    310                  default:
    311                    break;
    312                }
    313          
    314                // Release the memory
    315                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    316          
    317                // Next - if one is available
    318                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   24E6         ADD     A,#-0x1a
   \   000058   601E         JZ      ??SampleApp_ProcessEvent_6
   \   00005A   245A         ADD     A,#0x5a
   \   00005C   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005E   24EF         ADD     A,#-0x11
   \   000060   60B2         JZ      ??SampleApp_ProcessEvent_2
   \   000062   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000064                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000076   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000078                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007F   80B5         SJMP    ??SampleApp_ProcessEvent_4
    319              }
    320          
    321              // return unprocessed events
    322              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000081   EE           MOV     A,R6
   \   000082   FA           MOV     R2,A
   \   000083   EF           MOV     A,R7
   \   000084   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000086   FB           MOV     R3,A
   \   000087   8071         SJMP    ??SampleApp_ProcessEvent_9
    323            }
    324          
    325            // Send a message out - This event is generated by a timer
    326            //  (setup in SampleApp_Init()).
    327            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000089   EE           MOV     A,R6
   \   00008A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008C   5068         JNC     ??SampleApp_ProcessEvent_10
    328            {
    329                P1_1 = 0;     
   \   00008E   C291         CLR     0x90.1
    330              // Send the periodic message
    331                if(shortAddr == 0) {
   \   000090   90....       MOV     DPTR,#shortAddr
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F8           MOV     R0,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   49           ORL     A,R1
   \   00009A   700C         JNZ     ??SampleApp_ProcessEvent_11
    332                  SampleApp_SendPeriodicMessage(ADDR,'C');
   \   00009C                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009C   7A43         MOV     R2,#0x43
   \   00009E   90....       MOV     DPTR,#ADDR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
   \   0000A6   8030         SJMP    ??SampleApp_ProcessEvent_12
    333                } else {
    334                  uint8 data[]="ABCD";
   \                     ??SampleApp_ProcessEvent_11:
   \   0000A8   90....       MOV     DPTR,#`?<Constant "ABCD">`
   \   0000AB   C082         PUSH    DPL
   \   0000AD   85..82       MOV     DPL,?XSP + 0
   \   0000B0   85..83       MOV     DPH,?XSP + 1
   \   0000B3   AC82         MOV     R4,DPL
   \   0000B5   AD83         MOV     R5,DPH
   \   0000B7   7583..       MOV     DPH,#(`?<Constant "ABCD">` >> 8) & 0xff
   \   0000BA   D082         POP     DPL
   \   0000BC   7405         MOV     A,#0x5
   \   0000BE   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    335                  SampleApp_Send_P2P_Message(data, 4, shortAddr);
   \   0000C1                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   0000C1   90....       MOV     DPTR,#shortAddr
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FC           MOV     R4,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FD           MOV     R5,A
   \   0000C9   7904         MOV     R1,#0x4
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   AA82         MOV     R2,DPL
   \   0000D3   AB83         MOV     R3,DPH
   \   0000D5   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    336                }
    337          
    338              // Setup to send message again in normal period (+ a little jitter)
    339              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    340                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \                     ??SampleApp_ProcessEvent_12:
   \   0000D8                ; Setup parameters for call to function osal_rand
   \   0000D8   12....       LCALL   ??osal_rand?relay
   \   0000DB                ; Setup parameters for call to function osal_start_timerEx
   \   0000DB   EA           MOV     A,R2
   \   0000DC   24D0         ADD     A,#-0x30
   \   0000DE   FC           MOV     R4,A
   \   0000DF   E4           CLR     A
   \   0000E0   3407         ADDC    A,#0x7
   \   0000E2   FD           MOV     R5,A
   \   0000E3   7A01         MOV     R2,#0x1
   \   0000E5   7B00         MOV     R3,#0x0
   \   0000E7   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   12....       LCALL   ??osal_start_timerEx?relay
    341          
    342              // return unprocessed events
    343              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000EF   EE           MOV     A,R6
   \   0000F0   6401         XRL     A,#0x1
   \   0000F2   FA           MOV     R2,A
   \   0000F3   EF           MOV     A,R7
   \   0000F4   8090         SJMP    ??SampleApp_ProcessEvent_8
    344            }
    345          
    346            // Discard unknown events
    347            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000F6   7A00         MOV     R2,#0x0
   \   0000F8   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000FA   7405         MOV     A,#0x5
   \   0000FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FF   7F04         MOV     R7,#0x4
   \   000101   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000104                REQUIRE _A_P1
    348          }
    349          
    350          /*********************************************************************
    351           * Event Generation Functions
    352           */
    353          /*********************************************************************
    354           * @fn      SampleApp_HandleKeys
    355           *
    356           * @brief   Handles all key events for this device.
    357           *
    358           * @param   shift - true if in shift/alt.
    359           * @param   keys - bit field for key events. Valid entries:
    360           *                 HAL_KEY_SW_2
    361           *                 HAL_KEY_SW_1
    362           *
    363           * @return  none
    364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    366          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    367            (void)shift;  // Intentionally unreferenced parameter
    368            
    369            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    370            {
    371              /* This key sends the Flash Command is sent to Group 1.
    372               * This device will not receive the Flash Command from this
    373               * device (even if it belongs to group 1).
    374               */
    375              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    376            }
    377          
    378            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    379            {
    380              /* The Flashr Command is sent to Group 1.
    381               * This key toggles this device in and out of group 1.
    382               * If this device doesn't belong to group 1, this application
    383               * will not receive the Flash command sent to group 1.
    384               */
    385              aps_Group_t *grp;
    386              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    387              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    388              {
    389                // Remove from the group
    390                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    391              }
    392              else
    393              {
    394                // Add to the flash group
    395                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    396              }
    397            }
    398          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    399          
    400          /*********************************************************************
    401           * LOCAL FUNCTIONS
    402           */
    403          
    404          /*********************************************************************
    405           * @fn      SampleApp_MessageMSGCB
    406           *
    407           * @brief   Data message processor callback.  This function processes
    408           *          any incoming data - probably from other devices.  So, based
    409           *          on cluster ID, perform the intended action.
    410           *
    411           * @param   none
    412           *
    413           * @return  none
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    416          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    417            uint16 flashTime;
    418            uint8 data[18]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7402         MOV     A,#0x2
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   7412         MOV     A,#0x12
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    419          
    420            switch ( pkt->clusterId )
                   ^
Warning[Pe546]: transfer of control bypasses initialization of:
            variable "rssilevel" (declared at line 428 of
                      "C:\Users\icecreamco\Desktop\´ø¹¦·Å-¾àÀë\Coordinator\Proj
                      ects\zstack\Samples\SampleApp\Source\SampleApp.c")
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 1,A
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000036   0200         DW        2
   \   000038   02           DB        2
   \   000039   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003B   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003F   ....         DW        ??SampleApp_MessageMSGCB_2
    421            {
    422              case SAMPLEAPP_PERIODIC_CLUSTERID:
    423          
    424                break;
    425                
    426              case SAMPLEAPP_P2P_CLUSTERID:
    427                 osal_memcpy(data,pkt->cmd.Data,pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   75..00       MOV     ?V0 + 2,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   EA           MOV     A,R2
   \   000053   2420         ADD     A,#0x20
   \   000055   F582         MOV     DPL,A
   \   000057   EB           MOV     A,R3
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FC           MOV     R4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FD           MOV     R5,A
   \   000061   7405         MOV     A,#0x5
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memcpy?relay
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    428                 uint8 rssilevel=macRadioEnergyDetectStop();   //Í£Ö¹¼ì²â  
   \   000072                ; Setup parameters for call to function macRadioEnergyDetectStop
   \   000072   12....       LCALL   ??macRadioEnergyDetectStop?relay
   \   000075   E9           MOV     A,R1
   \   000076   F8           MOV     R0,A
    429                 uint8 message[2];
    430                 message[0] = TXPOWER;
   \   000077   12....       LCALL   ?Subroutine2 & 0xFFFF
    431                 message[1] = rssilevel;
   \                     ??CrossCallReturnLabel_4:
   \   00007A   7401         MOV     A,#0x1
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   E8           MOV     A,R0
   \   000080   F0           MOVX    @DPTR,A
    432                 HalUARTWrite(0, "0", 1);
   \   000081                ; Setup parameters for call to function HalUARTWrite
   \   000081   7C01         MOV     R4,#0x1
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7A..         MOV     R2,#`?<Constant "0">` & 0xff
   \   000087   7B..         MOV     R3,#(`?<Constant "0">` >> 8) & 0xff
   \   000089   7900         MOV     R1,#0x0
   \   00008B   12....       LCALL   ??HalUARTWrite?relay
    433                 HalUARTWrite(0, message, 2);
   \   00008E                ; Setup parameters for call to function HalUARTWrite
   \   00008E   7C02         MOV     R4,#0x2
   \   000090   7D00         MOV     R5,#0x0
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   7900         MOV     R1,#0x0
   \   00009E   12....       LCALL   ??HalUARTWrite?relay
    434                 macRadioEnergyDetectStart(); 
   \   0000A1                ; Setup parameters for call to function macRadioEnergyDetectStart
   \   0000A1   12....       LCALL   ??macRadioEnergyDetectStart?relay
    435                 // ÈôÊÕµ½Êý¾ÝÇÒÊý¾ÝÎÞÎó£¬Ö±½ÓÁÁÆð,·ñÔòled1ÉÁ2´Î£¬ÖÜÆÚÊÇ150ms
    436                 if(data[0] == 111)
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   646F         XRL     A,#0x6f
   \   0000AC   7018         JNZ     ??SampleApp_MessageMSGCB_3
    437                 {    shortAddr = data[1] * 256 + data[2];
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   7404         MOV     A,#0x4
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   90....       MOV     DPTR,#shortAddr
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E9           MOV     A,R1
   \   0000C1   F0           MOVX    @DPTR,A
    438                      P1_1 = 1;
   \   0000C2   D291         SETB    0x90.1
   \   0000C4   803F         SJMP    ??SampleApp_MessageMSGCB_0
    439                 }
    440                 else
    441                 {
    442                      HalLedBlink( HAL_LED_1, 2, 50, 150 );
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000C6                ; Setup parameters for call to function HalLedBlink
   \   0000C6   7C96         MOV     R4,#-0x6a
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7B32         MOV     R3,#0x32
   \   0000CC   7A02         MOV     R2,#0x2
   \   0000CE   7901         MOV     R1,#0x1
   \   0000D0   8030         SJMP    ??SampleApp_MessageMSGCB_4
    443                 }
    444           
    445                break;  
    446                
    447              case SAMPLEAPP_FLASH_CLUSTERID:
    448                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    449                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000D2   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9                ; Setup parameters for call to function HalLedBlink
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   8882         MOV     DPL,R0
   \   0000E2   8983         MOV     DPH,R1
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   EA           MOV     A,R2
   \   0000E9   2400         ADD     A,#0x0
   \   0000EB   F5..         MOV     ?V0 + 0,A
   \   0000ED   E4           CLR     A
   \   0000EE   39           ADDC    A,R1
   \   0000EF   F5..         MOV     ?V0 + 1,A
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?US_SHR
   \   0000F8   AC..         MOV     R4,?V0 + 0
   \   0000FA   AD..         MOV     R5,?V0 + 1
   \   0000FC   7B32         MOV     R3,#0x32
   \   0000FE   7A04         MOV     R2,#0x4
   \   000100   7908         MOV     R1,#0x8
   \                     ??SampleApp_MessageMSGCB_4:
   \   000102   12....       LCALL   ??HalLedBlink?relay
    450                break;
    451            }
    452          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000105   7414         MOV     A,#0x14
   \   000107   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00010A                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    453          
    454          /*********************************************************************
    455           * @fn      SampleApp_SendPeriodicMessage
    456           *
    457           * @brief   Send the periodic message.
    458           *
    459           * @param   none
    460           *
    461           * @return  none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void SampleApp_SendPeriodicMessage(uint8 ADR,uint8 fieldsel)
   \                     SampleApp_SendPeriodicMessage:
    464          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    465            uint8 data[]="ABCD";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "ABCD">_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "ABCD">_1` & 0xff
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    466          
    467            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    468                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    469                                 4,
    470                                 data,
    471                                 &SampleApp_TransID,
    472                                 AF_DISCV_ROUTE,
    473                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..04       MOV     ?V0 + 0,#0x4
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..01       MOV     ?V0 + 0,#0x1
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7920         MOV     R1,#0x20
   \   000057   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000059   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00005D   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00005F   12....       LCALL   ??AF_DataRequest?relay
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    474            {
    475            }
    476            else
    477            {
    478                // Error occurred in request to send.
    479            }
    480          
    481          }
   \   000067   7405         MOV     A,#0x5
   \   000069   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0
    482          
    483          /*********************************************************************
    484           * @fn      SampleApp_SendFlashMessage
    485           *
    486           * @brief   Send the flash message to group 1.
    487           *
    488           * @param   flashTime - in milliseconds
    489           *
    490           * @return  none
    491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    493          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    494            uint8 buffer[3];
    495            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    496            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    497            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    498          
    499            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    500                                 SAMPLEAPP_FLASH_CLUSTERID,
    501                                 3,
    502                                 buffer,
    503                                 &SampleApp_TransID,
    504                                 AF_DISCV_ROUTE,
    505                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0 + 0,#0x2
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    506            {
    507            }
    508            else
    509            {
    510              // Error occurred in request to send.
    511            }
    512          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E   80..         SJMP    ?Subroutine1
    513          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          void SampleApp_Send_P2P_Message(uint8* dat, uint8 n, uint16 shortaddr) 
   \                     SampleApp_Send_P2P_Message:
    515          {   
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    516            SampleApp_P2P_DstAddr.addr.shortAddr = shortaddr;
   \   000007   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00000A   EC           MOV     A,R4
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   ED           MOV     A,R5
   \   00000E   F0           MOVX    @DPTR,A
    517            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc, 
    518                                  SAMPLEAPP_P2P_CLUSTERID, 
    519                                  n, 
    520                                  dat, 
    521                                  &SampleApp_TransID, 
    522                                  AF_DISCV_ROUTE, 
    523                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) 
   \   00000F                ; Setup parameters for call to function AF_DataRequest
   \   00000F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000017   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00001A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   8A..         MOV     ?V0 + 0,R2
   \   000024   8B..         MOV     ?V0 + 1,R3
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   8E..         MOV     ?V0 + 0,R6
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..04       MOV     ?V0 + 0,#0x4
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7920         MOV     R1,#0x20
   \   00003F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000041   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000043   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000045   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000047   12....       LCALL   ??AF_DataRequest?relay
   \   00004A   7409         MOV     A,#0x9
   \   00004C                REQUIRE ?Subroutine1
   \   00004C                ; // Fall through to label ?Subroutine1
    524            { 
    525            }
    526          
    527          
    528            else 
    529            { 
    530                // Error occurred in request to send. 
    531            } 
    532          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ADDR>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART OK\\n">`:
   \   000000   55415254     DB "UART OK\012"
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ABCD">`:
   \   000000   41424344     DB "ABCD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ABCD">_1`:
   \   000000   41424344     DB "ABCD"
   \            00      
    533          /*********************************************************************
    534          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     27
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     1      0     15
       -> MT_UartInit                   0      0     24
       -> MT_UartRegisterTaskID         0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> afRegister                    0      0     24
       -> RegisterForKeys               0      0     24
       -> osal_memcpy                   0      0     30
       -> aps_AddGroup                  0      0     24
     SampleApp_MessageMSGCB             2      0     51
       -> osal_memcpy                   0      0     68
       -> macRadioEnergyDetectStop      0      0     62
       -> HalUARTWrite                  0      0     62
       -> HalUARTWrite                  0      0     62
       -> macRadioEnergyDetectStart     0      0     62
       -> HalLedBlink                   0      0     62
       -> HalLedBlink                   0      0     62
     SampleApp_ProcessEvent             2      0     17
       -> osal_msg_receive              0      0     34
       -> osal_start_timerEx            0      0     34
       -> macRadioEnergyDetectStart     0      0     34
       -> osal_msg_deallocate           0      0     34
       -> osal_msg_receive              0      0     34
       -> SampleApp_HandleKeys          0      0     34
       -> SampleApp_MessageMSGCB        0      0     34
       -> SampleApp_SendPeriodicMessage
                                        0      0     34
       -> SampleApp_Send_P2P_Message
                                        0      0     34
       -> osal_rand                     0      0     34
       -> osal_start_timerEx            0      0     34
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     41
       -> AF_DataRequest                0      0     48
     SampleApp_Send_P2P_Message         0      0     36
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P1                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     ADDR                                     1
     TX_F                                     1
     shortAddr                                2
     SampleApp_Init                         207
     ?Subroutine0                             8
     ?Subroutine2                             3
     ??Subroutine4_0                          9
     SampleApp_ProcessEvent                 260
     SampleApp_HandleKeys                    62
     ??Subroutine5_0                          5
     SampleApp_MessageMSGCB                 266
     ?Subroutine3                            12
     SampleApp_SendPeriodicMessage          108
     ?Subroutine1                             3
     SampleApp_SendFlashMessage             112
     SampleApp_Send_P2P_Message              76
     ?<Initializer for ADDR>                  1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "UART OK\n">                  9
     ?<Constant "Group 1">                    8
     ?<Constant "ABCD">                       5
     ?<Constant {0}>                         18
     ?<Constant "0">                          2
     ?<Constant "ABCD">_1                     5

 
 1 131 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    63 bytes in segment XDATA_ROM_C
    68 bytes in segment XDATA_Z
 
 1 174 bytes of CODE  memory
    63 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    69 bytes of XDATA memory

Errors: none
Warnings: 1
